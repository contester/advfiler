// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos.proto

package protos

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FileChunk struct {
	Fid     string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	Sha1Sum []byte `protobuf:"bytes,2,opt,name=sha1sum,proto3" json:"sha1sum,omitempty"`
	Size_   int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *FileChunk) Reset()      { *m = FileChunk{} }
func (*FileChunk) ProtoMessage() {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_protos_048bc51bf8d03777, []int{0}
}
func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(dst, src)
}
func (m *FileChunk) XXX_Size() int {
	return m.Size()
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetFid() string {
	if m != nil {
		return m.Fid
	}
	return ""
}

func (m *FileChunk) GetSha1Sum() []byte {
	if m != nil {
		return m.Sha1Sum
	}
	return nil
}

func (m *FileChunk) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type Digests struct {
	Sha1 []byte `protobuf:"bytes,1,opt,name=sha1,proto3" json:"sha1,omitempty"`
	Md5  []byte `protobuf:"bytes,2,opt,name=md5,proto3" json:"md5,omitempty"`
}

func (m *Digests) Reset()      { *m = Digests{} }
func (*Digests) ProtoMessage() {}
func (*Digests) Descriptor() ([]byte, []int) {
	return fileDescriptor_protos_048bc51bf8d03777, []int{1}
}
func (m *Digests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Digests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Digests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Digests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Digests.Merge(dst, src)
}
func (m *Digests) XXX_Size() int {
	return m.Size()
}
func (m *Digests) XXX_DiscardUnknown() {
	xxx_messageInfo_Digests.DiscardUnknown(m)
}

var xxx_messageInfo_Digests proto.InternalMessageInfo

func (m *Digests) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

func (m *Digests) GetMd5() []byte {
	if m != nil {
		return m.Md5
	}
	return nil
}

type FileInfo struct {
	Size_      int64        `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Digests    *Digests     `protobuf:"bytes,2,opt,name=digests" json:"digests,omitempty"`
	ModuleType string       `protobuf:"bytes,3,opt,name=module_type,json=moduleType,proto3" json:"module_type,omitempty"`
	Chunks     []*FileChunk `protobuf:"bytes,4,rep,name=chunks" json:"chunks,omitempty"`
}

func (m *FileInfo) Reset()      { *m = FileInfo{} }
func (*FileInfo) ProtoMessage() {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_protos_048bc51bf8d03777, []int{2}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(dst, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileInfo) GetDigests() *Digests {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *FileInfo) GetModuleType() string {
	if m != nil {
		return m.ModuleType
	}
	return ""
}

func (m *FileInfo) GetChunks() []*FileChunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type FileInfo64 struct {
	Size_      int64    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Digests    *Digests `protobuf:"bytes,2,opt,name=digests" json:"digests,omitempty"`
	ModuleType string   `protobuf:"bytes,3,opt,name=module_type,json=moduleType,proto3" json:"module_type,omitempty"`
	InlineData []byte   `protobuf:"bytes,5,opt,name=inline_data,json=inlineData,proto3" json:"inline_data,omitempty"`
	Chunks     []uint64 `protobuf:"varint,6,rep,packed,name=chunks" json:"chunks,omitempty"`
}

func (m *FileInfo64) Reset()      { *m = FileInfo64{} }
func (*FileInfo64) ProtoMessage() {}
func (*FileInfo64) Descriptor() ([]byte, []int) {
	return fileDescriptor_protos_048bc51bf8d03777, []int{3}
}
func (m *FileInfo64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileInfo64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo64.Merge(dst, src)
}
func (m *FileInfo64) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo64) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo64.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo64 proto.InternalMessageInfo

func (m *FileInfo64) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileInfo64) GetDigests() *Digests {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *FileInfo64) GetModuleType() string {
	if m != nil {
		return m.ModuleType
	}
	return ""
}

func (m *FileInfo64) GetInlineData() []byte {
	if m != nil {
		return m.InlineData
	}
	return nil
}

func (m *FileInfo64) GetChunks() []uint64 {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type ChunkList struct {
	Chunks []uint64 `protobuf:"varint,1,rep,packed,name=chunks" json:"chunks,omitempty"`
}

func (m *ChunkList) Reset()      { *m = ChunkList{} }
func (*ChunkList) ProtoMessage() {}
func (*ChunkList) Descriptor() ([]byte, []int) {
	return fileDescriptor_protos_048bc51bf8d03777, []int{4}
}
func (m *ChunkList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChunkList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkList.Merge(dst, src)
}
func (m *ChunkList) XXX_Size() int {
	return m.Size()
}
func (m *ChunkList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkList.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkList proto.InternalMessageInfo

func (m *ChunkList) GetChunks() []uint64 {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func init() {
	proto.RegisterType((*FileChunk)(nil), "protos.FileChunk")
	proto.RegisterType((*Digests)(nil), "protos.Digests")
	proto.RegisterType((*FileInfo)(nil), "protos.FileInfo")
	proto.RegisterType((*FileInfo64)(nil), "protos.FileInfo64")
	proto.RegisterType((*ChunkList)(nil), "protos.ChunkList")
}
func (this *FileChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileChunk)
	if !ok {
		that2, ok := that.(FileChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fid != that1.Fid {
		return false
	}
	if !bytes.Equal(this.Sha1Sum, that1.Sha1Sum) {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	return true
}
func (this *Digests) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Digests)
	if !ok {
		that2, ok := that.(Digests)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sha1, that1.Sha1) {
		return false
	}
	if !bytes.Equal(this.Md5, that1.Md5) {
		return false
	}
	return true
}
func (this *FileInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileInfo)
	if !ok {
		that2, ok := that.(FileInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if !this.Digests.Equal(that1.Digests) {
		return false
	}
	if this.ModuleType != that1.ModuleType {
		return false
	}
	if len(this.Chunks) != len(that1.Chunks) {
		return false
	}
	for i := range this.Chunks {
		if !this.Chunks[i].Equal(that1.Chunks[i]) {
			return false
		}
	}
	return true
}
func (this *FileInfo64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileInfo64)
	if !ok {
		that2, ok := that.(FileInfo64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if !this.Digests.Equal(that1.Digests) {
		return false
	}
	if this.ModuleType != that1.ModuleType {
		return false
	}
	if !bytes.Equal(this.InlineData, that1.InlineData) {
		return false
	}
	if len(this.Chunks) != len(that1.Chunks) {
		return false
	}
	for i := range this.Chunks {
		if this.Chunks[i] != that1.Chunks[i] {
			return false
		}
	}
	return true
}
func (this *ChunkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChunkList)
	if !ok {
		that2, ok := that.(ChunkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Chunks) != len(that1.Chunks) {
		return false
	}
	for i := range this.Chunks {
		if this.Chunks[i] != that1.Chunks[i] {
			return false
		}
	}
	return true
}
func (this *FileChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protos.FileChunk{")
	s = append(s, "Fid: "+fmt.Sprintf("%#v", this.Fid)+",\n")
	s = append(s, "Sha1Sum: "+fmt.Sprintf("%#v", this.Sha1Sum)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Digests) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protos.Digests{")
	s = append(s, "Sha1: "+fmt.Sprintf("%#v", this.Sha1)+",\n")
	s = append(s, "Md5: "+fmt.Sprintf("%#v", this.Md5)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protos.FileInfo{")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	if this.Digests != nil {
		s = append(s, "Digests: "+fmt.Sprintf("%#v", this.Digests)+",\n")
	}
	s = append(s, "ModuleType: "+fmt.Sprintf("%#v", this.ModuleType)+",\n")
	if this.Chunks != nil {
		s = append(s, "Chunks: "+fmt.Sprintf("%#v", this.Chunks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileInfo64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&protos.FileInfo64{")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	if this.Digests != nil {
		s = append(s, "Digests: "+fmt.Sprintf("%#v", this.Digests)+",\n")
	}
	s = append(s, "ModuleType: "+fmt.Sprintf("%#v", this.ModuleType)+",\n")
	s = append(s, "InlineData: "+fmt.Sprintf("%#v", this.InlineData)+",\n")
	s = append(s, "Chunks: "+fmt.Sprintf("%#v", this.Chunks)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChunkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protos.ChunkList{")
	s = append(s, "Chunks: "+fmt.Sprintf("%#v", this.Chunks)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtos(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FileChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileChunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Fid)))
		i += copy(dAtA[i:], m.Fid)
	}
	if len(m.Sha1Sum) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Sha1Sum)))
		i += copy(dAtA[i:], m.Sha1Sum)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *Digests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Digests) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sha1) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Sha1)))
		i += copy(dAtA[i:], m.Sha1)
	}
	if len(m.Md5) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Md5)))
		i += copy(dAtA[i:], m.Md5)
	}
	return i, nil
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Size_))
	}
	if m.Digests != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Digests.Size()))
		n1, err := m.Digests.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ModuleType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ModuleType)))
		i += copy(dAtA[i:], m.ModuleType)
	}
	if len(m.Chunks) > 0 {
		for _, msg := range m.Chunks {
			dAtA[i] = 0x22
			i++
			i = encodeVarintProtos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FileInfo64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Size_))
	}
	if m.Digests != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Digests.Size()))
		n2, err := m.Digests.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.ModuleType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ModuleType)))
		i += copy(dAtA[i:], m.ModuleType)
	}
	if len(m.InlineData) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.InlineData)))
		i += copy(dAtA[i:], m.InlineData)
	}
	if len(m.Chunks) > 0 {
		dAtA4 := make([]byte, len(m.Chunks)*10)
		var j3 int
		for _, num := range m.Chunks {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintProtos(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *ChunkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Chunks) > 0 {
		dAtA6 := make([]byte, len(m.Chunks)*10)
		var j5 int
		for _, num := range m.Chunks {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func encodeVarintProtos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FileChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.Sha1Sum)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovProtos(uint64(m.Size_))
	}
	return n
}

func (m *Digests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovProtos(uint64(m.Size_))
	}
	if m.Digests != nil {
		l = m.Digests.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.ModuleType)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if len(m.Chunks) > 0 {
		for _, e := range m.Chunks {
			l = e.Size()
			n += 1 + l + sovProtos(uint64(l))
		}
	}
	return n
}

func (m *FileInfo64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovProtos(uint64(m.Size_))
	}
	if m.Digests != nil {
		l = m.Digests.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.ModuleType)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.InlineData)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if len(m.Chunks) > 0 {
		l = 0
		for _, e := range m.Chunks {
			l += sovProtos(uint64(e))
		}
		n += 1 + sovProtos(uint64(l)) + l
	}
	return n
}

func (m *ChunkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chunks) > 0 {
		l = 0
		for _, e := range m.Chunks {
			l += sovProtos(uint64(e))
		}
		n += 1 + sovProtos(uint64(l)) + l
	}
	return n
}

func sovProtos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtos(x uint64) (n int) {
	return sovProtos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FileChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileChunk{`,
		`Fid:` + fmt.Sprintf("%v", this.Fid) + `,`,
		`Sha1Sum:` + fmt.Sprintf("%v", this.Sha1Sum) + `,`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Digests) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Digests{`,
		`Sha1:` + fmt.Sprintf("%v", this.Sha1) + `,`,
		`Md5:` + fmt.Sprintf("%v", this.Md5) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileInfo{`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`Digests:` + strings.Replace(fmt.Sprintf("%v", this.Digests), "Digests", "Digests", 1) + `,`,
		`ModuleType:` + fmt.Sprintf("%v", this.ModuleType) + `,`,
		`Chunks:` + strings.Replace(fmt.Sprintf("%v", this.Chunks), "FileChunk", "FileChunk", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileInfo64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileInfo64{`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`Digests:` + strings.Replace(fmt.Sprintf("%v", this.Digests), "Digests", "Digests", 1) + `,`,
		`ModuleType:` + fmt.Sprintf("%v", this.ModuleType) + `,`,
		`InlineData:` + fmt.Sprintf("%v", this.InlineData) + `,`,
		`Chunks:` + fmt.Sprintf("%v", this.Chunks) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChunkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChunkList{`,
		`Chunks:` + fmt.Sprintf("%v", this.Chunks) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProtos(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FileChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1Sum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1Sum = append(m.Sha1Sum[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha1Sum == nil {
				m.Sha1Sum = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Digests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Digests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Digests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = append(m.Sha1[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha1 == nil {
				m.Sha1 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = append(m.Md5[:0], dAtA[iNdEx:postIndex]...)
			if m.Md5 == nil {
				m.Md5 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Digests == nil {
				m.Digests = &Digests{}
			}
			if err := m.Digests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks, &FileChunk{})
			if err := m.Chunks[len(m.Chunks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Digests == nil {
				m.Digests = &Digests{}
			}
			if err := m.Digests.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlineData = append(m.InlineData[:0], dAtA[iNdEx:postIndex]...)
			if m.InlineData == nil {
				m.InlineData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chunks = append(m.Chunks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtos
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Chunks) == 0 {
					m.Chunks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chunks = append(m.Chunks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chunks = append(m.Chunks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtos
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Chunks) == 0 {
					m.Chunks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chunks = append(m.Chunks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtos   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protos.proto", fileDescriptor_protos_048bc51bf8d03777) }

var fileDescriptor_protos_048bc51bf8d03777 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x3d, 0x4e, 0xf3, 0x40,
	0x10, 0x86, 0x3d, 0x9f, 0xf3, 0x25, 0x78, 0x1c, 0x09, 0xd8, 0x02, 0xb9, 0x9a, 0x58, 0xa6, 0x31,
	0x4d, 0x50, 0x42, 0xe0, 0x00, 0x10, 0x21, 0x21, 0xa8, 0x56, 0xf4, 0x91, 0xc1, 0x0e, 0x59, 0x91,
	0xd8, 0x11, 0xeb, 0x14, 0xa1, 0xe2, 0x08, 0x34, 0x1c, 0x01, 0x89, 0xa3, 0x50, 0xa6, 0x4c, 0x49,
	0x36, 0x0d, 0x65, 0x8e, 0x80, 0xbc, 0xfe, 0x21, 0x17, 0xa0, 0xf2, 0x3b, 0x3f, 0x7e, 0xe6, 0x9d,
	0xd1, 0x62, 0x73, 0xfa, 0x94, 0xa4, 0x89, 0x6c, 0xeb, 0x0f, 0xab, 0xe7, 0x91, 0x77, 0x8d, 0xd6,
	0xa5, 0x18, 0x47, 0x17, 0xa3, 0x59, 0xfc, 0xc8, 0xf6, 0xd0, 0x1c, 0x8a, 0xd0, 0x01, 0x17, 0x7c,
	0x8b, 0x67, 0x92, 0x39, 0xd8, 0x90, 0xa3, 0xa0, 0x23, 0x67, 0x13, 0xe7, 0x9f, 0x0b, 0x7e, 0x93,
	0x97, 0x21, 0x63, 0x58, 0x93, 0xe2, 0x39, 0x72, 0x4c, 0x17, 0x7c, 0x93, 0x6b, 0xed, 0x1d, 0x63,
	0xa3, 0x2f, 0x1e, 0x22, 0x99, 0x4a, 0x5d, 0x1e, 0x05, 0x1d, 0xcd, 0x6a, 0x72, 0xad, 0x33, 0xfc,
	0x24, 0x3c, 0x2d, 0x40, 0x99, 0xf4, 0xde, 0x00, 0x77, 0xb2, 0xf1, 0x57, 0xf1, 0x30, 0xa9, 0x88,
	0xf0, 0x4b, 0x64, 0x47, 0xd8, 0x08, 0x73, 0xa2, 0xfe, 0xcd, 0xee, 0xee, 0xb6, 0x8b, 0x35, 0x8a,
	0x41, 0xbc, 0xac, 0xb3, 0x16, 0xda, 0x93, 0x24, 0x9c, 0x8d, 0xa3, 0x41, 0x3a, 0x9f, 0xe6, 0xbe,
	0x2c, 0x8e, 0x79, 0xea, 0x76, 0x3e, 0xcd, 0x58, 0xf5, 0xfb, 0x6c, 0x4d, 0xe9, 0xd4, 0x5c, 0xd3,
	0xb7, 0xbb, 0xfb, 0x25, 0xaa, 0x3a, 0x00, 0x2f, 0x1a, 0xbc, 0x77, 0x40, 0x2c, 0x7d, 0x9d, 0xf5,
	0xfe, 0xdc, 0x59, 0x0b, 0x6d, 0x11, 0x8f, 0x45, 0x1c, 0x0d, 0xc2, 0x20, 0x0d, 0x9c, 0xff, 0xfa,
	0x40, 0x98, 0xa7, 0xfa, 0x41, 0x1a, 0xb0, 0x83, 0xca, 0x7a, 0xdd, 0x35, 0xfd, 0x5a, 0xe5, 0xf3,
	0x10, 0x2d, 0x6d, 0xfc, 0x46, 0xc8, 0x74, 0xab, 0x09, 0xb6, 0x9b, 0xce, 0x7b, 0x8b, 0x15, 0x19,
	0xcb, 0x15, 0x19, 0x9b, 0x15, 0xc1, 0x8b, 0x22, 0xf8, 0x50, 0x04, 0x9f, 0x8a, 0x60, 0xa1, 0x08,
	0xbe, 0x14, 0xc1, 0xb7, 0x22, 0x63, 0xa3, 0x08, 0x5e, 0xd7, 0x64, 0x2c, 0xd6, 0x64, 0x2c, 0xd7,
	0x64, 0xdc, 0xe5, 0x0f, 0xe4, 0xe4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x63, 0xb3, 0x1c, 0x88, 0x37,
	0x02, 0x00, 0x00,
}
